Index: app/src/androidTest/java/com/example/solutionx/common/data/repository/local/DataStoreStorageTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.solutionx.common.data.repository.local\r\n\r\nimport android.content.Context\r\nimport androidx.test.core.app.ApplicationProvider\r\nimport androidx.test.ext.junit.runners.AndroidJUnit4\r\nimport kotlinx.coroutines.runBlocking\r\nimport org.junit.After\r\nimport org.junit.Assert.assertEquals\r\nimport org.junit.Before\r\nimport org.junit.Test\r\nimport org.junit.runner.RunWith\r\n\r\n\r\n\r\n//todo fix naming convention in this class\r\n\r\n@RunWith(AndroidJUnit4::class)\r\nclass DataStoreStorageAndroidTest {\r\n    @Before\r\n    fun setup() {\r\n        context = ApplicationProvider.getApplicationContext<Context>()\r\n        dataStoreStorage = DataStoreStorage.getInstance(context)\r\n    }\r\n    private lateinit var dataStoreStorage: DataStoreStorage\r\n\r\n    lateinit var context: Context\r\n\r\n\r\n    @Test\r\n    fun testSaveAndGet() {\r\n        runBlocking {\r\n\r\n            val key = \"testKey\"\r\n            val value = \"testValue\"\r\n\r\n            dataStoreStorage.save(key, value)\r\n            val retrievedValue: String = dataStoreStorage.get(key)\r\n            assertEquals(value, retrievedValue)\r\n        }\r\n    }\r\n    @Test\r\n    fun testSaveWithSameKey() {\r\n        runBlocking {\r\n            val key = \"testKey\"\r\n            val value1 = \"testValue1\"\r\n\r\n            dataStoreStorage.save(key, value1)\r\n            val retrievedValue1: String = dataStoreStorage.get(key)\r\n            assertEquals(value1, retrievedValue1)\r\n\r\n            val value2 = \"testValue2\"\r\n            dataStoreStorage.save(key, value2)\r\n            val retrievedValue2: String = dataStoreStorage.get(key)\r\n\r\n            assertEquals(value2, retrievedValue2)\r\n        }\r\n    }\r\n    @Test(expected = IllegalArgumentException::class)\r\n    fun testSaveAndGetWithNonExistentKey() {\r\n        runBlocking {\r\n            val nonExistentKey = \"nonExistentKey\"\r\n            dataStoreStorage.get<String, String>(nonExistentKey)\r\n        }\r\n    }\r\n    @Test\r\n    fun testSaveAndGetWithDifferentTypes() {\r\n        runBlocking {\r\n            val stringKey = \"stringKey\"\r\n            val stringValue = \"testValue\"\r\n            dataStoreStorage.save(stringKey, stringValue)\r\n            val retrievedStringValue: String = dataStoreStorage.get(stringKey)\r\n            assertEquals(stringValue, retrievedStringValue)\r\n\r\n            val intKey = \"intKey\"\r\n            val intValue = 123\r\n            dataStoreStorage.save(intKey, intValue)\r\n            val retrievedIntValue: Int = dataStoreStorage.get(intKey)\r\n            assertEquals(intValue, retrievedIntValue)\r\n\r\n            val booleanKey = \"booleanKey\"\r\n            val booleanValue = true\r\n            dataStoreStorage.save(booleanKey, booleanValue)\r\n            val retrievedBooleanValue: Boolean = dataStoreStorage.get(booleanKey)\r\n            assertEquals(booleanValue, retrievedBooleanValue)\r\n        }\r\n    }\r\n    @Test(expected = IllegalArgumentException::class)\r\n    fun testSaveWithUnsupportedType() {\r\n        runBlocking {\r\n            val key = \"unsupportedKey\"\r\n            val unsupportedValue = 1.0\r\n            dataStoreStorage.save(key, unsupportedValue)\r\n        }\r\n    }\r\n\r\n\r\n\r\n}
===================================================================
diff --git a/app/src/androidTest/java/com/example/solutionx/common/data/repository/local/DataStoreStorageTest.kt b/app/src/androidTest/java/com/example/solutionx/common/data/repository/local/DataStoreStorageTest.kt
--- a/app/src/androidTest/java/com/example/solutionx/common/data/repository/local/DataStoreStorageTest.kt	
+++ b/app/src/androidTest/java/com/example/solutionx/common/data/repository/local/DataStoreStorageTest.kt	
@@ -57,7 +57,7 @@
     }
     @Test(expected = IllegalArgumentException::class)
     fun testSaveAndGetWithNonExistentKey() {
-        runBlocking {
+            runBlocking {
             val nonExistentKey = "nonExistentKey"
             dataStoreStorage.get<String, String>(nonExistentKey)
         }
